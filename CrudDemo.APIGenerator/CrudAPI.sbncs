using System;
using System.Linq;
using System.Threading;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

namespace {{ Namespace }}
{
	public static class CrudAPI
	{
		public static void WithAutoCRUD(this IEndpointRouteBuilder endpoint)
		{
			{{~ for model in Models ~}}
			endpoint.MapGet(
				"{{ model.Route }}/{{ model.Name }}s",
				async ([FromServices] {{ model.DbContext }} dbContext, CancellationToken cancellationToken) => Results.Ok(
					(await dbContext.{{ model.Name }}s.ToListAsync(cancellationToken)).Select(MapToRecord)
				)
			);

			endpoint.MapGet(
				"{{ model.Route }}/{{ model.Name }}s/{{ model.RouteTemplateKey }}",
				async ([FromServices] {{ model.DbContext }} dbContext, {{ model.RouteKeyArguments }}, CancellationToken cancellationToken) =>
				{
					var item = await dbContext.{{ model.Name }}s.FindAsync(new object[]{ {{ model.KeyArgumentList }} }, cancellationToken);
					return item == null ? Results.NotFound() : Results.Ok(MapToRecord(item));
				}
			);

			endpoint.MapPost(
				"{{ model.Route }}/{{ model.Name }}s",
				async ([FromServices] {{ model.DbContext }} dbContext, [FromBody] Create{{ model.Name }}Record content, CancellationToken cancellationToken) =>
				{
					var item = new {{ model.FullName }}
					{
						{{~ for property in model.Properties ~}}
						{{ property.Key }} = content.{{ property.Key }},
						{{~ end ~}}
					};
					await dbContext.{{ model.Name }}s.AddAsync(item, cancellationToken);
					await dbContext.SaveChangesAsync(cancellationToken);
					return Results.Created($"{{ model.Route }}/{{ model.Name }}s/{{ model.ResourceCreatedPath }}", item);
				}
			);

			endpoint.MapPut(
				"{{ model.Route }}/{{ model.Name }}s/{{ model.RouteTemplateKey }}",
				async ([FromServices] {{ model.DbContext }} dbContext, [FromBody] Update{{ model.Name }}Record content, {{ model.RouteKeyArguments }}, CancellationToken cancellationToken) =>
				{
					var state = await dbContext.{{ model.Name }}s.FindAsync(new object[]{ {{ model.KeyArgumentList }} }, cancellationToken);
					if (state == null)
					{
						return Results.NotFound();
					}

					{{~ for property in model.Properties ~}}
					if (state.{{ property.Key }} != content.{{ property.Key }})
						state.{{ property.Key }} = content.{{ property.Key }};
					{{~ end ~}}

					if (!dbContext.ChangeTracker.HasChanges())
					{
						return Results.StatusCode(304);
					}
					await dbContext.SaveChangesAsync(cancellationToken);
					return Results.NoContent();
				}
			);

			endpoint.MapDelete(
				"{{ model.Route }}/{{ model.Name }}s/{{ model.RouteTemplateKey }}",
				async ([FromServices] {{ model.DbContext }} dbContext, {{ model.RouteKeyArguments }}, CancellationToken cancellationToken) =>
				{
					var state = await dbContext.{{ model.Name }}s.FindAsync(new object[]{ {{ model.KeyArgumentList }} }, cancellationToken);
					if (state == null)
					{
						return Results.NotFound();
					}
					dbContext.{{ model.Name }}s.Remove(state);
					await dbContext.SaveChangesAsync(cancellationToken);
					return Results.StatusCode(205);
				}
			);
			{{~ end ~}}
		}

		{{~ for model in Models ~}}
		private static {{ model.Name }}Record MapToRecord({{ model.FullName }} item) => new {{ model.Name }}Record({{ model.RecordMap }});
		public record {{ model.Name }}Record({{ model.RecordKey }}, {{ model.RecordProperties }});
		public record Update{{ model.Name }}Record({{ model.RecordProperties }});
		public record Create{{ model.Name }}Record({{ model.RecordProperties }});

		{{~ end ~}}
	}
}
